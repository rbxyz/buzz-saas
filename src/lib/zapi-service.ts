/**
 * Servi√ßo para integra√ß√£o com a Z-API para envio de mensagens WhatsApp
 */

// Fun√ß√£o para enviar mensagem via Z-API
export async function enviarMensagemWhatsApp(
  telefone: string,
  mensagem: string,
): Promise<{ success: boolean; error?: string }> {
  try {
    console.log("üöÄ [ZAPI] Iniciando envio de mensagem WhatsApp...")

    // Obter configura√ß√µes da Z-API
    const instanceId = process.env.ZAPI_INSTANCE_ID
    const token = process.env.ZAPI_TOKEN
    const clientToken = process.env.ZAPI_CLIENT_TOKEN

    // Validar configura√ß√µes
    if (!instanceId || !token || !clientToken) {
      console.error("‚ùå [ZAPI] Configura√ß√µes incompletas:", {
        hasInstanceId: !!instanceId,
        hasToken: !!token,
        hasClientToken: !!clientToken,
      })
      return { success: false, error: "Configura√ß√µes Z-API incompletas" }
    }

    // Formatar telefone (garantir que tenha o c√≥digo do pa√≠s)
    const telefoneFormatado = formatarTelefone(telefone)

    console.log("üì± [ZAPI] Preparando envio:", {
      telefoneOriginal: telefone,
      telefoneFormatado,
      mensagemLength: mensagem.length,
    })

    // Construir URL conforme documenta√ß√£o
    const url = `https://api.z-api.io/instances/${instanceId}/token/${token}/send-text`

    // Preparar payload
    const payload = {
      phone: telefoneFormatado,
      message: mensagem,
    }

    console.log("üåê [ZAPI] Enviando requisi√ß√£o para:", url.replace(token, "***"))
    console.log("üîë [ZAPI] Headers incluem Client-Token:", !!clientToken)

    // Enviar requisi√ß√£o
    const response = await fetch(url, {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        "Client-Token": clientToken,
      },
      body: JSON.stringify(payload),
    })

    console.log("üì• [ZAPI] Resposta recebida:", {
      status: response.status,
      statusText: response.statusText,
      ok: response.ok,
    })

    // Processar resposta
    const data = await response.json()
    console.log("üìä [ZAPI] Corpo da resposta:", data)

    // Verificar se a mensagem foi enviada com sucesso
    // Z-API pode retornar diferentes formatos de resposta
    if (data.zaapId || data.messageId || data.id || (data.status && data.status === "success")) {
      console.log("‚úÖ [ZAPI] Mensagem enviada com sucesso:", data)
      return { success: true }
    }

    // Se chegou aqui, houve algum problema
    console.error("‚ùå [ZAPI] Erro na resposta:", data)
    return {
      success: false,
      error: data.message || data.error || `Erro na resposta da API`,
    }
  } catch (error) {
    console.error("üí• [ZAPI] Erro ao enviar mensagem:", error)
    return {
      success: false,
      error: error instanceof Error ? error.message : "Erro desconhecido ao enviar mensagem",
    }
  }
}

// Fun√ß√£o para formatar telefone
function formatarTelefone(telefone: string): string {
  // Remover caracteres n√£o num√©ricos
  const numeroLimpo = telefone.replace(/\D/g, "")

  // Verificar se j√° tem o c√≥digo do pa√≠s (55)
  if (numeroLimpo.startsWith("55")) {
    return numeroLimpo
  }

  // Adicionar c√≥digo do pa√≠s
  return `55${numeroLimpo}`
}

// Fun√ß√£o para verificar status da inst√¢ncia Z-API
export async function verificarStatusZApi(): Promise<{ connected: boolean; error?: string }> {
  try {
    const instanceId = process.env.ZAPI_INSTANCE_ID
    const token = process.env.ZAPI_TOKEN
    const clientToken = process.env.ZAPI_CLIENT_TOKEN

    if (!instanceId || !token || !clientToken) {
      return { connected: false, error: "Configura√ß√µes Z-API incompletas" }
    }

    const url = `https://api.z-api.io/instances/${instanceId}/token/${token}/status`

    console.log("üîç [ZAPI-STATUS] Verificando status em:", url.replace(token, "***"))
    console.log("üîë [ZAPI-STATUS] Headers incluem Client-Token:", !!clientToken)

    const response = await fetch(url, {
      method: "GET",
      headers: {
        "Content-Type": "application/json",
        "Client-Token": clientToken,
      },
    })

    console.log("üì• [ZAPI-STATUS] Resposta HTTP:", {
      status: response.status,
      statusText: response.statusText,
      ok: response.ok,
    })

    const data = await response.json()
    console.log("üìä [ZAPI-STATUS] Corpo da resposta:", data)

    // Verificar se a inst√¢ncia est√° conectada
    // A Z-API pode retornar diferentes formatos de resposta

    // Caso especial: "You are already connected" significa que est√° conectado
    if (data.error === "You are already connected.") {
      console.log("‚úÖ [ZAPI-STATUS] Inst√¢ncia j√° est√° conectada")
      return { connected: true }
    }

    // Verificar outros formatos de resposta positiva
    const connected =
      data.connected === true ||
      data.status === "CONNECTED" ||
      data.status === "ONLINE" ||
      (data.value && data.value.status === "CONNECTED")

    if (connected) {
      console.log("‚úÖ [ZAPI-STATUS] Inst√¢ncia est√° conectada")
      return { connected: true }
    }

    // Se chegou aqui, n√£o est√° conectado
    console.log("‚ùå [ZAPI-STATUS] Inst√¢ncia n√£o est√° conectada:", data)
    return {
      connected: false,
      error: data.message || data.error || "Status desconhecido",
    }
  } catch (error) {
    console.error("üí• [ZAPI-STATUS] Erro ao verificar status:", error)
    return {
      connected: false,
      error: error instanceof Error ? error.message : "Erro ao verificar status",
    }
  }
}
